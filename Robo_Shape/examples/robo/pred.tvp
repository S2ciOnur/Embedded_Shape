// For every program variable z there is a unary predicate that holds for
// list elements pointed by z.
// The unique property is used to convey the fact that the predicate can hold
// for at most one individual.
// The pointer property is a visualization hint for graphical renderers.
%s HVar{r1,r2,r3,c1,c2,c3}
%s rows{r1,r2,r3}
%s columns{c1,c2,c3}

// Menge von Markierungen
%s marks{marked_O, marked_X}
foreach (z in HVar) {
  %p z(v_1) unique pointer
}

// The predicate n represents the rn field of the list data type.
%p rn(v_1, v_2) function acyclic

// The predicate n represents the cn field of the list data type.
%p cn(v_1, v_2) function acyclic


// The t[rn] predicate records transitive reflexive reachability between
// list elements along the rn field.
%i t[rn](v_1, v_2) = rn*(v_1, v_2) transitive reflexive

// The t[cn] predicate records transitive reflexive reachability between
// list elements along the cn field.
%i t[cn](v_1, v_2) = cn*(v_1, v_2) transitive reflexive


%p marked_X(v) 
%p marked_O(v)

// predicates
%i marked(v) = marked_X(v) | marked_O(v)
//------------------------------------------------------------------------------------------------
// Game is over
foreach (r in rows) {
	foreach(x in marks) {
	%i win_marked_row[r,x]() = E(v1,v2,v3) r(v1) & x(v1) & rn(v1,v2) & x(v2) & rn(v2,v3) & x(v3)
	}
}
%i win_marked_row() = 
	win_marked_row[r1,marked_X]() | win_marked_row[r2,marked_X]() | win_marked_row[r3,marked_X]()
	| win_marked_row[r1,marked_O]() | win_marked_row[r2,marked_O]() | win_marked_row[r3,marked_O]()

// check someone won with columns	
foreach (c in columns) {
	foreach(x in marks) {
	%i win_marked_column[c,x]() = E(v1,v2,v3) c(v1) & x(v1) & cn(v1,v2) & x(v2) & cn(v2,v3) & x(v3)
	}
}
%i win_marked_column() = 
	win_marked_column[c1,marked_X]() | win_marked_column[c2,marked_X]() | win_marked_column[c3,marked_X]()
	| win_marked_column[c1,marked_O]() | win_marked_column[c2,marked_O]() | win_marked_column[c3,marked_O]()
	
/*
Diagonale f11, f22, f33
x(f11) & f21-> f22 & x(f22) & f31 -> f32 ->f33 & x(f33)
*/

foreach(x in marks) {
	%i win_marked_diagonale[r1,r2,r3,x]() = 
		E(v1,v2,v3,v4,v5,v6) 
		r1(v1) & x(v1) &
		r2(v2) & rn(v2,v3) & r2(v3) & x(v3) &
		r3(v4) & rn(v4,v5) & r3(v5) & rn(v5,v6) & r3(v6) & x(v6)
}

/* diagonale f13, f22, f31
x(f31) & f21-> f22 & x(f22) & f11 -> f12 ->f13 & x(f13)
*/
foreach(x in marks) {
	%i win_marked_diagonale[r3,r2,r1,x]() = 
		E(v1,v2,v3,v4,v5,v6) 
		r3(v1) & x(v1) &
		r2(v2) & rn(v2,v3) & r2(v3) & x(v3) &
		r1(v4) & rn(v4,v5) & r1(v5) & rn(v5,v6) & r1(v6) & x(v6)
}

%i win_marked_diagonale() = 
	win_marked_diagonale[r1,r2,r3, marked_X]() | win_marked_diagonale[r3,r2,r1, marked_X]() |
	win_marked_diagonale[r1,r2,r3, marked_O]() | win_marked_diagonale[r3,r2,r1, marked_O]()	
//------------------------------------------------------------------------------------------------
// myTurn
// marked fields
%i marked_X_f11() = E(v1) r1(v1) & marked(v1) & marked_X(v1)
%i marked_O_f11() = E(v1) r1(v1) & marked(v1) & marked_O(v1)
%i marked_X_f12() = E(v1,v2) r1(v1) & rn(v1,v2) & r1(v2) & marked(v2) & marked_X(v2)
%i marked_O_f12() = E(v1,v2) r1(v1) & rn(v1,v2) & r1(v2) & marked(v2) & marked_O(v2)
%i marked_X_f13() = E(v1,v2,v3) r1(v1) & rn(v1,v2) & r1(v2) & rn(v2,v3) & r1(v3) & marked(v3) & marked_X(v3)
%i marked_O_f13() = E(v1,v2,v3) r1(v1) & rn(v1,v2) & r1(v2) & rn(v2,v3) & r1(v3) & marked(v3) & marked_O(v3)

%i marked_X_f21() = E(v1) r2(v1) & marked(v1) & marked_X(v1)
%i marked_O_f21() = E(v1) r2(v1) & marked(v1) & marked_O(v1)
%i marked_X_f22() = E(v1,v2) r2(v1) & rn(v1,v2) & r2(v2) & marked(v2) & marked_X(v2)
%i marked_X_f23() = E(v1,v2,v3) r2(v1) & rn(v1,v2) & r2(v2) & rn(v2,v3) & r2(v3) & marked(v3) & marked_X(v3)
%i marked_O_f23() = E(v1,v2,v3) r2(v1) & rn(v1,v2) & r2(v2) & rn(v2,v3) & r2(v3) & marked(v3) & marked_O(v3)

%i marked_X_f31() = E(v1) r3(v1) & marked(v1) & marked_X(v1)
%i marked_O_f31() = E(v1) r3(v1) & marked(v1) & marked_O(v1)
%i marked_X_f32() = E(v1,v2) r3(v1) & rn(v1,v2) & r3(v2) & marked(v2) & marked_X(v2)
%i marked_O_f32() = E(v1,v2) r3(v1) & rn(v1,v2) & r3(v2) & marked(v2) & marked_O(v2)
%i marked_X_f33() = E(v1,v2,v3) r3(v1) & rn(v1,v2) & r3(v2) & rn(v2,v3) & r3(v3) & marked(v3) & marked_X(v3)
%i marked_O_f33() = E(v1,v2,v3) r3(v1) & rn(v1,v2) & r3(v2) & rn(v2,v3) & r3(v3) & marked(v3) & marked_O(v3)
//-----------------------------------------------------------------------------------------------------------
// Spiellogik
// nicht benutzt in turn 2
%i M_X11_O12() = marked_X_f11() & marked_O_f12()
%i M_X11_O13() = marked_X_f11() & marked_O_f13()
%i M_X11_O21() = marked_X_f11() & marked_O_f21()
%i M_X11_O23() = marked_X_f11() & marked_O_f23()
%i M_X11_O31() = marked_X_f11() & marked_O_f31()
%i M_X11_O32() = marked_X_f11() & marked_O_f32()
%i M_X11_O33() = marked_X_f11() & marked_O_f33()

%i M_X12_O11() = marked_X_f12() & marked_O_f11()
%i M_X12_O13() = marked_X_f12() & marked_O_f13()
%i M_X12_O21() = marked_X_f12() & marked_O_f21()
%i M_X12_O23() = marked_X_f12() & marked_O_f23()
%i M_X12_O31() = marked_X_f12() & marked_O_f31()
%i M_X12_O32() = marked_X_f12() & marked_O_f32()
%i M_X12_O33() = marked_X_f12() & marked_O_f33()

%i M_X13_O11() = marked_X_f13() & marked_O_f11()
%i M_X13_O12() = marked_X_f13() & marked_O_f12()
%i M_X13_O21() = marked_X_f13() & marked_O_f21()
%i M_X13_O23() = marked_X_f13() & marked_O_f23()
%i M_X13_O31() = marked_X_f13() & marked_O_f31()
%i M_X13_O32() = marked_X_f13() & marked_O_f32()
%i M_X13_O33() = marked_X_f13() & marked_O_f33()

%i M_X21_O11() = marked_X_f21() & marked_O_f11()
%i M_X21_O12() = marked_X_f21() & marked_O_f12()
%i M_X21_O13() = marked_X_f21() & marked_O_f13()
%i M_X21_O23() = marked_X_f21() & marked_O_f23()
%i M_X21_O31() = marked_X_f21() & marked_O_f31()
%i M_X21_O32() = marked_X_f21() & marked_O_f32()
%i M_X21_O33() = marked_X_f21() & marked_O_f33()

%i M_X23_O11() = marked_X_f23() & marked_O_f11()
%i M_X23_O12() = marked_X_f23() & marked_O_f12()
%i M_X23_O13() = marked_X_f23() & marked_O_f13()
%i M_X23_O21() = marked_X_f23() & marked_O_f21()
%i M_X23_O31() = marked_X_f23() & marked_O_f31()
%i M_X23_O32() = marked_X_f23() & marked_O_f32()
%i M_X23_O33() = marked_X_f23() & marked_O_f33()

%i M_X31_O11() = marked_X_f31() & marked_O_f11()
%i M_X31_O12() = marked_X_f31() & marked_O_f12()
%i M_X31_O13() = marked_X_f31() & marked_O_f13()
%i M_X31_O21() = marked_X_f31() & marked_O_f21()
%i M_X31_O23() = marked_X_f31() & marked_O_f23()
%i M_X31_O32() = marked_X_f31() & marked_O_f32()
%i M_X31_O33() = marked_X_f31() & marked_O_f33()

%i M_X32_O11() = marked_X_f32() & marked_O_f11()
%i M_X32_O12() = marked_X_f32() & marked_O_f12()
%i M_X32_O13() = marked_X_f32() & marked_O_f13()
%i M_X32_O21() = marked_X_f32() & marked_O_f21()
%i M_X32_O23() = marked_X_f32() & marked_O_f23()
%i M_X32_O31() = marked_X_f32() & marked_O_f31()
%i M_X32_O33() = marked_X_f32() & marked_O_f33()

%i M_X33_O11() = marked_X_f33() & marked_O_f11()
%i M_X33_O12() = marked_X_f33() & marked_O_f12()
%i M_X33_O13() = marked_X_f33() & marked_O_f13()
%i M_X33_O21() = marked_X_f33() & marked_O_f21()
%i M_X33_O23() = marked_X_f33() & marked_O_f23()
%i M_X33_O31() = marked_X_f33() & marked_O_f31()
%i M_X33_O32() = marked_X_f33() & marked_O_f32()

//  Turn 2
%i M_X22_O11() = marked_X_f22() & marked_O_f11()
%i M_X22_O12() = marked_X_f22() & marked_O_f12()
%i M_X22_O13() = marked_X_f22() & marked_O_f13()
%i M_X22_O21() = marked_X_f22() & marked_O_f21()
%i M_X22_O23() = marked_X_f22() & marked_O_f23()
%i M_X22_O31() = marked_X_f22() & marked_O_f31()
%i M_X22_O32() = marked_X_f22() & marked_O_f32()
%i M_X22_O33() = marked_X_f22() & marked_O_f33()

// Turn 4
%i M_X22_O11_X33_O12 () = M_X22_O11() & M_X33_O12 ()
// Turn 6
// Turn 8